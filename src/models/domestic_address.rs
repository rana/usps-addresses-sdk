/*
 * Addresses
 *
 * The Addresses API validates and corrects address information, eliminating errors, improving package delivery service and package pricing. This suite of APIs provides different utilities for addressing components. The ZIP Code&#8482; lookup finds valid ZIP Code&#8482; for a City and State.  The City/State lookup provides the valid cities and states for a provided ZIP Code&#8482;.  The Address Standardization API validates and standardizes USPS&#174; domestic addresses, city and state names, and ZIP Code&#8482; in accordance with USPS&#174; addressing standards.  The USPS&#174; address standard includes the ZIP + 4&#174;, signifying a USPS&#174; delivery point, given a street address, a city and a state. 
 *
 * The version of the OpenAPI document: 3.0.2
 * Contact: APISupport@usps.gov
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DomesticAddress : Address fields for US locations
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DomesticAddress {
    /// The number of a building along with the name of the road or street on which it is located.
    #[serde(rename = "streetAddress", skip_serializing_if = "Option::is_none")]
    pub street_address: Option<String>,
    /// This is the abbreviation of street address line for the address.
    #[serde(rename = "streetAddressAbbreviation", skip_serializing_if = "Option::is_none")]
    pub street_address_abbreviation: Option<String>,
    /// The secondary unit designator, such as apartment(APT) or suite(STE) number, defining the exact location of the address within a building.  For more information please see [Postal Explorer](https://pe.usps.com/text/pub28/28c2_003.htm).
    #[serde(rename = "secondaryAddress", skip_serializing_if = "Option::is_none")]
    pub secondary_address: Option<String>,
    /// This is the abbreviation of city name for the address.
    #[serde(rename = "cityAbbreviation", skip_serializing_if = "Option::is_none")]
    pub city_abbreviation: Option<String>,
    /// This is the city name of the address.
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// This is two-character state code of the address.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// This is the 5-digit ZIP code.
    #[serde(rename = "ZIPCode", skip_serializing_if = "Option::is_none")]
    pub zip_code: Option<String>,
    /// This is the ZIP+4 extension.
    #[serde(rename = "ZIPPlus4", skip_serializing_if = "Option::is_none")]
    pub zip_plus4: Option<String>,
    /// An area, sector, or residential development within a geographic area (typically used for addresses in Puerto Rico)
    #[serde(rename = "urbanization", skip_serializing_if = "Option::is_none")]
    pub urbanization: Option<String>,
}

impl DomesticAddress {
    /// Address fields for US locations
    pub fn new() -> DomesticAddress {
        DomesticAddress {
            street_address: None,
            street_address_abbreviation: None,
            secondary_address: None,
            city_abbreviation: None,
            city: None,
            state: None,
            zip_code: None,
            zip_plus4: None,
            urbanization: None,
        }
    }
}

