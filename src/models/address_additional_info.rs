/*
 * Addresses
 *
 * The Addresses API validates and corrects address information, eliminating errors, improving package delivery service and package pricing. This suite of APIs provides different utilities for addressing components. The ZIP Code&#8482; lookup finds valid ZIP Code&#8482; for a City and State.  The City/State lookup provides the valid cities and states for a provided ZIP Code&#8482;.  The Address Standardization API validates and standardizes USPS&#174; domestic addresses, city and state names, and ZIP Code&#8482; in accordance with USPS&#174; addressing standards.  The USPS&#174; address standard includes the ZIP + 4&#174;, signifying a USPS&#174; delivery point, given a street address, a city and a state. 
 *
 * The version of the OpenAPI document: 3.0.2
 * Contact: APISupport@usps.gov
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AddressAdditionalInfo : Extra information about the request.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AddressAdditionalInfo {
    /// A specific set of digits between 00 and 99 assigned to every address that is combined with the ZIP + 4&#174; Code to provide a unique identifier for every delivery address.  A street address does not necessarily represent a single delivery point because a street address such as one for an apartment building may have several delivery points.
    #[serde(rename = "deliveryPoint", skip_serializing_if = "Option::is_none")]
    pub delivery_point: Option<String>,
    /// This is the carrier route code (values unspecified).
    #[serde(rename = "carrierRoute", skip_serializing_if = "Option::is_none")]
    pub carrier_route: Option<String>,
    /// The DPV Confirmation Indicator is the primary method used by the USPS&#174; to determine whether an address was considered deliverable or undeliverable.
    #[serde(rename = "DPVConfirmation", skip_serializing_if = "Option::is_none")]
    pub dpv_confirmation: Option<DpvConfirmation>,
    /// Indicates if the location is a [Commercial Mail Receiving Agency (CMRA)](https://faq.usps.com/s/article/Mail-Services-at-Non-Postal-Sites-CMRA)
    #[serde(rename = "DPVCMRA", skip_serializing_if = "Option::is_none")]
    pub dpvcmra: Option<Dpvcmra>,
    /// Indicates whether this is a business address.
    #[serde(rename = "business", skip_serializing_if = "Option::is_none")]
    pub business: Option<Business>,
    /// Central Delivery is for all business office buildings, office complexes, and/or industrial/professional parks. This may include call windows, horizontal locked mail receptacles, cluster box units.
    #[serde(rename = "centralDeliveryPoint", skip_serializing_if = "Option::is_none")]
    pub central_delivery_point: Option<CentralDeliveryPoint>,
    /// Indicates whether the location designated by the address is occupied.
    #[serde(rename = "vacant", skip_serializing_if = "Option::is_none")]
    pub vacant: Option<Vacant>,
}

impl AddressAdditionalInfo {
    /// Extra information about the request.
    pub fn new() -> AddressAdditionalInfo {
        AddressAdditionalInfo {
            delivery_point: None,
            carrier_route: None,
            dpv_confirmation: None,
            dpvcmra: None,
            business: None,
            central_delivery_point: None,
            vacant: None,
        }
    }
}
/// The DPV Confirmation Indicator is the primary method used by the USPS&#174; to determine whether an address was considered deliverable or undeliverable.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DpvConfirmation {
    #[serde(rename = "Y 'Address was DPV confirmed for both primary and (if present) secondary numbers.'")]
    YQuoteAddressWasDpvConfirmedForBothPrimaryAndLeftParenthesisIfPresentRightParenthesisSecondaryNumbersPeriodQuote,
    #[serde(rename = "D 'Address was DPV confirmed for the primary number only, and the secondary number information was missing.'")]
    DQuoteAddressWasDpvConfirmedForThePrimaryNumberOnlyCommaAndTheSecondaryNumberInformationWasMissingPeriodQuote,
    #[serde(rename = "S 'Address was DPV confirmed for the primary number only, and the secondary number information was present but not confirmed.'")]
    SQuoteAddressWasDpvConfirmedForThePrimaryNumberOnlyCommaAndTheSecondaryNumberInformationWasPresentButNotConfirmedPeriodQuote,
    #[serde(rename = "N 'Both primary and (if present) secondary number information failed to DPV confirm.'")]
    NQuoteBothPrimaryAndLeftParenthesisIfPresentRightParenthesisSecondaryNumberInformationFailedToDpvConfirmPeriodQuote,
}

impl Default for DpvConfirmation {
    fn default() -> DpvConfirmation {
        Self::YQuoteAddressWasDpvConfirmedForBothPrimaryAndLeftParenthesisIfPresentRightParenthesisSecondaryNumbersPeriodQuote
    }
}
/// Indicates if the location is a [Commercial Mail Receiving Agency (CMRA)](https://faq.usps.com/s/article/Mail-Services-at-Non-Postal-Sites-CMRA)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Dpvcmra {
    #[serde(rename = "Y 'Address was found in the CMRA table. '")]
    YQuoteAddressWasFoundInTheCmraTablePeriodQuote,
    #[serde(rename = "N 'Address was not found in the CMRA table.'")]
    NQuoteAddressWasNotFoundInTheCmraTablePeriodQuote,
}

impl Default for Dpvcmra {
    fn default() -> Dpvcmra {
        Self::YQuoteAddressWasFoundInTheCmraTablePeriodQuote
    }
}
/// Indicates whether this is a business address.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Business {
    #[serde(rename = "Y  'The address is a business address.'")]
    YQuoteTheAddressIsABusinessAddressPeriodQuote,
    #[serde(rename = "N  'The address is not a business address.'")]
    NQuoteTheAddressIsNotABusinessAddressPeriodQuote,
}

impl Default for Business {
    fn default() -> Business {
        Self::YQuoteTheAddressIsABusinessAddressPeriodQuote
    }
}
/// Central Delivery is for all business office buildings, office complexes, and/or industrial/professional parks. This may include call windows, horizontal locked mail receptacles, cluster box units.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CentralDeliveryPoint {
    #[serde(rename = "Y  'The address is a central delivery point.'")]
    YQuoteTheAddressIsACentralDeliveryPointPeriodQuote,
    #[serde(rename = "N  'The address is not a central delivery point.'")]
    NQuoteTheAddressIsNotACentralDeliveryPointPeriodQuote,
}

impl Default for CentralDeliveryPoint {
    fn default() -> CentralDeliveryPoint {
        Self::YQuoteTheAddressIsACentralDeliveryPointPeriodQuote
    }
}
/// Indicates whether the location designated by the address is occupied.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Vacant {
    #[serde(rename = "Y  'The address is occupied.'")]
    YQuoteTheAddressIsOccupiedPeriodQuote,
    #[serde(rename = "N  'The address is not occupied.'")]
    NQuoteTheAddressIsNotOccupiedPeriodQuote,
}

impl Default for Vacant {
    fn default() -> Vacant {
        Self::YQuoteTheAddressIsOccupiedPeriodQuote
    }
}

