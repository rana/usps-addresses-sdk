/*
 * Addresses
 *
 * The Addresses API validates and corrects address information, eliminating errors, improving package delivery service and package pricing. This suite of APIs provides different utilities for addressing components. The ZIP Code&#8482; lookup finds valid ZIP Code&#8482; for a City and State.  The City/State lookup provides the valid cities and states for a provided ZIP Code&#8482;.  The Address Standardization API validates and standardizes USPS&#174; domestic addresses, city and state names, and ZIP Code&#8482; in accordance with USPS&#174; addressing standards.  The USPS&#174; address standard includes the ZIP + 4&#174;, signifying a USPS&#174; delivery point, given a street address, a city and a state. 
 *
 * The version of the OpenAPI document: 3.0.2
 * Contact: APISupport@usps.gov
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`get_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressError {
    Status400(models::ErrorMessage),
    Status401(models::ErrorMessage),
    Status403(models::ErrorMessage),
    Status404(models::ErrorMessage),
    Status429(models::ErrorMessage),
    Status503(models::ErrorMessage),
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_city_state`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCityStateError {
    Status400(models::ErrorMessage),
    Status401(models::ErrorMessage),
    Status403(models::ErrorMessage),
    Status429(models::ErrorMessage),
    Status503(models::ErrorMessage),
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_zip_code`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetZipCodeError {
    Status400(models::ErrorMessage),
    Status401(models::ErrorMessage),
    Status403(models::ErrorMessage),
    Status429(models::ErrorMessage),
    Status503(models::ErrorMessage),
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}


/// Standardizes street addresses including city and street abbreviations, provides missing information such as ZIP Code&#8482; and ZIP + 4&#174;.  Must specify a street address, a state and either a city or a ZIP Code&#8482;.
pub async fn get_address(configuration: &configuration::Configuration, street_address: &str, state: &str, secondary_address: Option<&str>, city: Option<&str>, urbanization: Option<&str>, zip_code: Option<&str>, zip_plus4: Option<&str>) -> Result<models::AddressResponse, Error<GetAddressError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/address", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("streetAddress", &street_address.to_string())]);
    if let Some(ref local_var_str) = secondary_address {
        local_var_req_builder = local_var_req_builder.query(&[("secondaryAddress", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = city {
        local_var_req_builder = local_var_req_builder.query(&[("city", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("state", &state.to_string())]);
    if let Some(ref local_var_str) = urbanization {
        local_var_req_builder = local_var_req_builder.query(&[("urbanization", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = zip_code {
        local_var_req_builder = local_var_req_builder.query(&[("ZIPCode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = zip_plus4 {
        local_var_req_builder = local_var_req_builder.query(&[("ZIPPlus4", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAddressError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the city and state corresponding to the given ZIP Code&#8482;.
pub async fn get_city_state(configuration: &configuration::Configuration, zip_code: &str) -> Result<models::CityStateResponse, Error<GetCityStateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/city-state", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("ZIPCode", &zip_code.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCityStateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the ZIP Code&#8482; and ZIP + 4&#174; corresponding to the given address, city, and state (use USPS state abbreviations).
pub async fn get_zip_code(configuration: &configuration::Configuration, street_address: &str, city: &str, state: &str, secondary_address: Option<&str>, zip_code: Option<&str>, zip_plus4: Option<&str>) -> Result<models::ZipCodeResponse, Error<GetZipCodeError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/zipcode", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("streetAddress", &street_address.to_string())]);
    if let Some(ref local_var_str) = secondary_address {
        local_var_req_builder = local_var_req_builder.query(&[("secondaryAddress", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("city", &city.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("state", &state.to_string())]);
    if let Some(ref local_var_str) = zip_code {
        local_var_req_builder = local_var_req_builder.query(&[("ZIPCode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = zip_plus4 {
        local_var_req_builder = local_var_req_builder.query(&[("ZIPPlus4", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetZipCodeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

